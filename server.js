 //PORT variable configured by heroku
 var PORT = process.env.PORT || 3000;
 var moment = require ('moment');

//create new express app
var express = require ('express');

//create express app
var app = express();

//tell node to start a new server then use app as boilerplate 
var http = require ('http').Server(app);

//bring in http server with socket.io library
var io = require('socket.io')(http);

//use express static to expose folder
//express static takes file path as only argument 
app.use(express.static(__dirname + '/public'));

/*
1. empty object that'll have a set key/value pairs
2. the key is a unique socket ID (auto-generated by socket io)
3. the value is whatever the client joined in with (eg, name: and room: info chosen)
4. so, clientInfo = {'some unique socket id':{name:'some name', room:'some room'}}*/
var clientInfo = {};

//on is to listen to event, first argument is name of the event
//access individual socket
io.on('connection', function(socket){
	console.log('User connected via socket.io');

	socket.on('joinRoom', function (joinRoom){
		//associate unique socket id and name, room info passed in on joinRoom object
		clientInfo[socket.id] = joinRoom;
		//tells socket io library to add socket to a specific room
		socket.join(joinRoom.room);
		socket.broadcast.to(joinRoom.room).emit('message', {
			name: 'System',
			text: joinRoom.name + ' has joined!',
			timestamp: moment().valueOf()
		});

	});

	socket.on('message', function(message){
		console.log('message recieved: '+message.text);
		//sends received message to everyone but the sender (current socket)
		//socket.broadcast.emit('message', message);

		message.timestamp = moment().valueOf();	
		//io.emit to emit message to all sockets in the same room
		io.to(clientInfo[socket.id].room).emit('message', message);
	});

	//socket object, event method. event method takes two arguments
	//1st event name, 2nd data to send
	socket.emit('message', {
		name: 'System',
		text: 'Welcome to the chat app',
		//javascript timestamp using valueOf(). returns number, not string
		timestamp: moment().valueOf()
	});

});

//start server
http.listen(PORT, function (){
	console.log('Server started!');
})